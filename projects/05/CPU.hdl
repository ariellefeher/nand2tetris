// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
/**1. 1st MUX16 - loads the instruction and recieves the prev. ALU output, and the C instruction. connects to A register    **/
    Mux16(a = instruction, b = outputALU, sel = instruction[15], out = Ainput);

/**2. determining whether to load the A or the C instruction - based on MSB of instruction **/ 
    Not(in = instruction[15], out = Ainstruct);

/**3. A Register - determining if to load to A based on first C instruction**/
    Or(a = Ainstruct, b = instruction[5], out = loadA);

    ARegister(in = Ainput, load = loadA, out = Aoutput, out[0..14] = addressM); //includes memory address output to addressM

/**4. 2nd MUX16 - Loading the output from A and inM, which will recieve C instruction and connect to the ALU **/ 
    Mux16(a = Aoutput, b = inM, sel = instruction[12], out = secondMuxOut);

/**5. D Register - determining if to load to D **/
    And(a = instruction[15], b = instruction[4], out = loadD);

    DRegister(in = outputALU, load = loadD, out = outputD);

/**6. ALU - connecting the D register and the 2nd Mux16 to the ALU, and loading the C instructions to the ALU **/
    ALU(x = outputD, y = secondMuxOut,
     zx = instruction[11], //first c instruction - c1
     nx = instruction[10], //second c instruction - c2
     zy = instruction[9], //third c instruction - c3
     ny =instruction[8], //fourth c instruction - c4
     f = instruction[7], //fifth c instruction - c5
     no = instruction[6], //sixth c instruction - c6
     out = outM, out = outputALU, zr = outputZR, ng = outputNG); //includes ALU output to outM
   
/**7. Output for writeM **/ 
    And(a = instruction[15], b = instruction[3], out = writeM);

/**8. Jump conditions  **/
    
    //JGT - if comp > 0 jump
        Or(a = outputZR, b = outputNG, out = zeroOrLess);
        Not(in = zeroOrLess, out = moreThanZero);

        And(a = moreThanZero, b = instruction[0], out = JGT);
 
    // JEQ - if  comp = 0, jump
        And(a = instruction[1], b =outputZR, out = JEQ); 

    //JLT - if comp < 0 jump
        And(a = instruction[2], b = outputNG, out = JLT); 

    //JLE - if comp <= 0 jump
        Or(a = JEQ, b = JLT, out = JLE);
        
    // jump if condition met, and load PC
        Or(a = JLE , b = JGT, out = returnToA); 

/**9. PC - checks the conditions to load the PC, or reset for the next instructions **/

    And(a = instruction[15], b = returnToA, out = jump); //jump if C instruction says so

    PC(in = Aoutput, load = jump, inc = true, reset = reset, out[0..14] = pc); //includes reset bit, and the Program Counter output
     
}